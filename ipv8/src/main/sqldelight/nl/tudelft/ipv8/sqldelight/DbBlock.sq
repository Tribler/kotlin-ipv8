CREATE TABLE blocks (
    type TEXT NOT NULL,
    tx BLOB NOT NULL,
    public_key BLOB NOT NULL,
    sequence_number INTEGER NOT NULL,
    link_public_key BLOB NOT NULL,
    link_sequence_number INTEGER NOT NULL,
    previous_hash BLOB NOT NULL,
    signature BLOB NOT NULL,
    block_timestamp INTEGER NOT NULL,
    insert_time INTEGER NOT NULL,
    block_hash BLOB NOT NULL,
    PRIMARY KEY (public_key, sequence_number)
);

addBlock:
INSERT INTO blocks (type, tx, public_key, sequence_number, link_public_key, link_sequence_number,
    previous_hash, signature, block_timestamp, insert_time, block_hash)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

get:
SELECT * FROM blocks WHERE public_key = ? AND sequence_number = ? LIMIT 1;

getAllBlocks:
SELECT * FROM blocks;

getBlockWithHash:
SELECT * FROM blocks WHERE block_hash = ? LIMIT 1;

getBlocksWithType:
SELECT * FROM blocks WHERE type = ?;

getLatestWithType:
SELECT * FROM blocks WHERE public_key = ? AND type = ? AND sequence_number =
(SELECT MAX(sequence_number) FROM blocks WHERE public_key = ? AND type = ?) LIMIT 1;

getLatest:
SELECT * FROM blocks WHERE public_key = ? AND sequence_number =
(SELECT MAX(sequence_number) FROM blocks WHERE public_key = ?) LIMIT 1;

getLatestBlocksWithTypes:
SELECT * FROM blocks WHERE public_key = ? AND type IN (?) ORDER BY sequence_number DESC LIMIT :rowNumbers;

getLatestBlocks:
SELECT * FROM blocks WHERE public_key = ? ORDER BY sequence_number DESC LIMIT :rowNumbers;

getBlockAfterWithType:
SELECT * FROM blocks WHERE sequence_number > ? AND public_key = ? AND type = ?
ORDER BY sequence_number ASC LIMIT 1;

getBlockAfter:
SELECT * FROM blocks WHERE sequence_number > ? AND public_key = ? ORDER BY sequence_number ASC
LIMIT 1;

getBlockBeforeWithType:
SELECT * FROM blocks WHERE sequence_number < ? AND public_key = ? AND type = ?
ORDER BY sequence_number DESC LIMIT 1;

getBlockBefore:
SELECT * FROM blocks WHERE sequence_number < ? AND public_key = ? ORDER BY sequence_number DESC
LIMIT 1;

getLatestSequenceNumber:
SELECT b1.sequence_number FROM blocks b1 WHERE b1.public_key = ? AND NOT EXISTS
(SELECT b2.sequence_number FROM blocks b2 WHERE b2.sequence_number = b1.sequence_number + 1
AND b2.public_key = ?) ORDER BY b1.sequence_number LIMIT 1;

getLowestSequenceNumberAfter:
SELECT sequence_number FROM blocks WHERE public_key = ? AND sequence_number > ?
ORDER BY sequence_number LIMIT 1;

getLinked:
SELECT * FROM blocks WHERE public_key = ? AND sequence_number = ? OR link_public_key = ? AND
link_sequence_number = ? ORDER BY block_timestamp ASC LIMIT 1;

getAllLinked:
SELECT * FROM blocks WHERE public_key = ? AND sequence_number = ? OR link_public_key = ? AND
link_sequence_number = ?;

crawl:
SELECT * FROM
    (SELECT * FROM blocks WHERE
        sequence_number >= ? AND
        sequence_number <= ? AND
        public_key = ? LIMIT :rowNumbers1)
UNION
SELECT * FROM
    (SELECT * FROM blocks WHERE
        link_sequence_number >= ? AND
        link_sequence_number <= ? AND
        link_sequence_number != 0 AND
        link_public_key = ? LIMIT :rowNumbers2);

getRecentBlocks:
SELECT * FROM blocks ORDER BY block_timestamp DESC LIMIT :rowNumbers OFFSET :offset;

getUsers:
SELECT DISTINCT public_key, MAX(sequence_number) FROM blocks GROUP BY public_key
ORDER BY MAX(sequence_number) DESC LIMIT :rowNumbers;

getMutualBlocks:
SELECT * FROM blocks WHERE public_key = ? OR link_public_key = ?
ORDER BY block_timestamp DESC LIMIT :rowNumbers;

getBlockCountWithPublicKey:
SELECT COUNT(*) FROM blocks WHERE public_key = ?;

getBlockCount:
SELECT COUNT(*) FROM blocks;
